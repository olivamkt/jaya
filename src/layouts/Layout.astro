---
interface Props {
	title: string
	description: string
}

const { title, description } = Astro.props
import '@fontsource/geist-mono'
import '@/styles/global.css'
import { ClientRouter } from 'astro:transitions'
import { SEO } from 'astro-seo'
import { withBase } from '@/utils/url'
import Header from '@/components/layout/Header.astro'
import Footer from '@/components/layout/Footer.astro'

const lang = 'en'
---

<!doctype html>
<html lang={lang}>
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<SEO
			title={title}
			titleTemplate="%s :: Jaya"
			description={description}
			canonical={Astro.url.toString()}
			openGraph={{
				basic: {
					title: 'Jaya',
					type: 'website',
					image: 'https://jaya.tech/og-image.jpg'
				},
				image: {
					alt: 'Jaya'
				},
				optional: {
					description: description
				}
			}}
		/>

		<link rel="alternate" href={`${Astro.site}en/`} hreflang="en" />
		<link rel="sitemap" href={withBase('/sitemap-index.xml')} />
		<link rel="icon" href={withBase('/favicon.ico')} type="image/x-icon" />

		<ClientRouter />
	</head>
	<body>
		<Header />

		<slot />
		<Footer />

		<script is:inline>
			// Calculate offset for fixed header
			const HEADER_OFFSET = 130 // nav-container height (110px) + 20px margin

			// Scroll to element with offset
			const scrollToElement = (element) => {
				if (!element) return

				const elementPosition = element.getBoundingClientRect().top
				const offsetPosition = elementPosition + window.pageYOffset - HEADER_OFFSET

				window.scrollTo({
					top: offsetPosition,
					behavior: 'smooth'
				})
			}

			// Handle hash navigation on page load and after transitions
			const scrollToHash = () => {
				const hash = window.location.hash
				if (hash) {
					const element = document.querySelector(hash)
					scrollToElement(element)
				}
			}

			// Handle clicks on anchor links
			const handleAnchorClick = (e) => {
				const link = e.target.closest('a')
				if (!link) return

				const href = link.getAttribute('href')
				if (!href?.includes('#')) return

				// Extract hash from href
				const hashIndex = href.indexOf('#')
				const hash = href.substring(hashIndex)
				const path = href.substring(0, hashIndex)

				// Check if it's a same-page anchor or going to home page with anchor
				const currentPath = window.location.pathname
				const isCurrentPage =
					!path || path === currentPath || path === window.location.origin + currentPath

				if (isCurrentPage && hash) {
					e.preventDefault()
					const element = document.querySelector(hash)
					if (element) {
						history.pushState(null, '', href)
						scrollToElement(element)
					}
				}
			}

			// Setup on page load
			document.addEventListener('astro:page-load', () => {
				scrollToHash()
				document.addEventListener('click', handleAnchorClick)
			})
		</script>
	</body>
</html>
